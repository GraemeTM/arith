Comp40 HW 2: Locality
============================================
Authors: Graeme McDonough (gmcdon03) and Henry Gray (hgray03)
October 2021

Help Received:
--------------
We received no help during this assignment.

Implementation:
---------------

Everything is running and performing as expected.

We followed our implementation plan quite specifically. We implemented some of 
the easier functions first in our color_math.h and color_math.c files in one go,
as well as our bitpacking functions, but the remainder of the functions we 
implemented as they became relevant to the compression or decompression of the 
image.

Testing also went smoothly. The bitpacking and color_math functions were easy
enough to test, as we could pass sample inputs through that we expected to have
specific results, including edge cases. 

Some of the specific tests we used were generated by make_ppm, a file we wrote 
to output randomly generated pixmaps as ppms, and then tested those images with
a variety of denominators to ensure our choice in denominator was valid.

We developed a simple program to create, compress, decompress, and ppmdiff our 
files to make sure that the program worked as expected, and that they can handle
all sorts of reasonable images. We also fed in some invalid files, making sure
that all of our assertions were catching errors as they came up consistently
and as expected.

Midway through work on the compression stage of compress40, we realized there 
was an edge case for bitpacking that we hadn't tested properly. As such, we had
to go back and re-do the Bitpack_news. We developed a more robust testing 
mechanism that used arrays of values and a codeword that stored each values 
width and lsb in order to systematically pack into signed and unsigned words. 
This allowed us to efficiently test and prove that our bitpack was solid, and as
a result, it was no longer a limiting factor for compress40

Architecture:
-------------
Overall:
The overall architecture is relatively simple and predefined by the spec. Our 
40image file handles command line input, and calls either the compress or 
decompress functions from compress40. Then, compress40 calls a variety of 
functions stored in a series of helper files, including bitpack, color_math, and
imghandling, such that the desired result is achieved.

color_math.h, color_math.c:
This interface handles math associated with RGB/Component Video conversions as 
well as Discrete Cosine Transformations and their inverses.

bitpack.h, bitpack.c:
The bitpack functions were already laid out at the beginning of the project,
so these implementations were quite simple. They involve the packing and 
unpacking of signed and unsigned integer values from a word.

imghandling.h, imghandling.c:
This interface provides functions that work with Pnm_ppm images, all of which 
are especially useful for the ppm manipulation this project required.

compress40.c:
This file implements a compression and decompression algorithm that take one of
two inputs. It takes ppms and compresses them into much smaller file sizes with 
minimal data loss or it takes a compressed file and decompresses it back out to
a ppm with a denominator of 255.

Hours:
------
18 Hours

2 hours for color_math, 3 hours for bitpack, 8 hours for compress and decompress
implementation, and another 5 for testing!
